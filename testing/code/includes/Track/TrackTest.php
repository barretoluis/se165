<?php
require_once __DIR__ . '\..\..\..\..\code\includes\Track\Track.class.php';
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-11-25 at 02:36:37.
 */
class TrackTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Track
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Track;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * Generated from @assert (72, 'title', 'description', 'F', FALSE) != -1;.
     * 
     * @covers Track::createTrack
     */
    public function testCreateTrack() {
        $this->assertEquals(
        -1, $this->object->createTrack(72, 'title', 'description', 'F', FALSE)
        );
    }

    /**
     * Generated from @assert (-50, 'title', 'desc', 'F', FALSE) == -1;.
     *
     * @covers Track::createTrack
     */
    public function testCreateTrack2() {
        $this->assertEquals(
        -1, $this->object->createTrack(-50, 'title', 'desc', 'F', FALSE)
        );
    }

    /**
     * Generated from @assert ('test', "%") == $resultSet;.
     *
     * @covers Track::searchTrack
     */
    public function testSearchTrack() {
        
        $output = $this->object->searchTrack('test', "%");
        $output = $output[0];
        
        $this->assertEquals(
            $output{'id'}
        , 14
        );
    }

    /**
     * Generated from @assert (14) == 'Test';.
     *
     * @covers Track::returnTrackName
     */
    public function testReturnTrackName() {
        $output = $this->object->returnTrackName(14);
        $output = $output[0];
        
        $this->assertEquals(
        'Test', $output['title']
        );
    }

    /**
     * Generated from @assert (14) != 'title';.
     *
     * @covers Track::returnTrackName
     */
    public function testReturnTrackName2() {
        $this->assertNotEquals(
        'title', $this->object->returnTrackName(14)
        );
    }

    /**
     * Generated from @assert (72) == 21;.
     *
     * @covers Track::returnDefaultTrackId
     */
    public function testReturnDefaultTrackId() {
        $this->assertEquals(
        21,
        $this->object->returnDefaultTrackId(72)
        );
    }

    /**
     * Generated from @assert (72) != 99;.
     *
     * @covers Track::returnDefaultTrackId
     */
    public function testReturnDefaultTrackId2() {
        $this->assertNotEquals(
        99, $this->object->returnDefaultTrackId(72)
        );
    }

    /**
     * Generated from @assert (-1) == -1;.
     *
     * @covers Track::returnDefaultTrackId
     */
    public function testReturnDefaultTrackId3() {
        $this->assertEquals(
        -1, $this->object->returnDefaultTrackId(-1)
        );
    }

    /**
     * Generated from @assert (72) == 21;.
     *
     * @covers Track::createDefaultTrack
     */
    public function testCreateDefaultTrack() {
        $this->assertEquals(
        21, $this->object->createDefaultTrack(72)
        );
    }

    /**
     * Generated from @assert (72) != 99;.
     *
     * @covers Track::createDefaultTrack
     */
    public function testCreateDefaultTrack2() {
        $this->assertNotEquals(
        99, $this->object->createDefaultTrack(72)
        );
    }

    /**
     * Generated from @assert (-1) == -1;.
     *
     * @covers Track::createDefaultTrack
     */
    public function testCreateDefaultTrack3() {
        $this->assertEquals(
        -1,
        $this->object->createDefaultTrack(-1)
        );
    }

    /**
     * Generated from @assert (72, NULL) == $resultSet;.
     *
     * @covers Track::getMyTrack
     */
    public function testGetMyTrack() {
        $this->assertEquals(
        $resultSet, $this->object->getMyTrack(72, NULL)
        );
    }

    /**
     * @covers Track::returnFollowingTracks
     * @todo   Implement testReturnFollowingTracks().
     */
    public function testReturnFollowingTracks() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Track::deleteTrack
     * @todo   Implement testDeleteTrack().
     */
    public function testDeleteTrack() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
