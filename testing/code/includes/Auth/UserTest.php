<?php

require_once __DIR__ . '\..\..\..\..\code\includes\Auth\User.class.php';
require_once __DIR__ . '\..\..\..\..\code\includes\Database.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-11-11 at 02:53:24.
 */
class UserTest extends PHPUnit_Framework_TestCase {

    /**
     * @var User
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new User;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * Generated from @assert ('password') != 'password'.
     *
     * @covers User::encryptPwd
     */
    public function testEncryptPwd() {
        $this->assertNotEquals(
                'password'
                , $this->object->encryptPwd('password')
        );
        // change>
    }

    /**
     * Generated from @assert ('tack', '3e818eec51b45583b9881f5f2fe455413483848ab61ba10a0c4914d5cfb24a155dfc70b707b948c1ae7ce175b7ee6f0d54487d07fcc147f813e0283346bb023c') == TRUE.
     * This test should return true, since this the second value in the assert function is
     * what is pulled manually from the database.
     * @covers User::checkPassword
     */
    public function testCheckPassword() {
        $this->assertEquals(
                TRUE
                , $this->object->checkPassword('tack', '3e818eec51b45583b9881f5f2fe455413483848ab61ba10a0c4914d5cfb24a155dfc70b707b948c1ae7ce175b7ee6f0d54487d07fcc147f813e0283346bb023c')
        );
    }

    /**
     * Generated from @assert ('tack', '129dkjsf0') == FALSE.
     * This test tests a random input for the second value. This second value is checked against the 
     * value created from the check password function.
     * @covers User::checkPassword
     */
    public function testCheckPassword2() {
        $this->assertEquals(
                FALSE
                , $this->object->checkPassword('tack', '129dkjsf0')
        );
    }

    /**
     * Generated from @assert ('tack@tackster.com', 'param2') != Exception.
     *
     * @covers User::sendResteEmail
     */
    public function testSendResteEmail() {
        $this->markTestIncomplete(
        //Exception
        // , $this->object->sendResteEmail('tack@tackster.com', 'param2')
        );
    }

    /**
     * Generated from @assert ('test@test.com') == TRUE.
     *
     * @covers User::searchUser
     */
    public function testSearchUser() {
        $this->assertNotEquals(
                FALSE
                , $this->object->searchUser('test@test.com')
        );
    }

    /**
     * Generated from @assert ('notauser@random.org') == FALSE.
     *
     * @covers User::searchUser
     */
    public function testSearchUser2() {
        $this->assertEquals(
                FALSE
                , $this->object->searchUser('notauser@random.org')
        );
    }

    /**
     * Generated from @assert () == TRUE.
     *
     * @covers User::logOutUser
     */
    public function testLogOutUser() {
        $this->markTestIncomplete(
        );
    }

    /**
     * @covers User::createUser
     * @todo   Implement testCreateUser().
     */
    public function testCreateUser() {
        // Remove the following lines when you implement this test.

        $userdata = array("fname" => "Robert", "lname" => "Lee", "email" => "Rememberthis1@test.com", "password" => "password", "gender" => "M", "source" => "I");
        $this->assertFalse(
                FALSE, $this->object->createUser($userdata)
        );
    }

    /**
     * @covers User::updateUser
     * @todo   Implement testUpdateUser().
     */
    public function testUpdateUser() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers User::sendConfEmail
     * @todo   Implement testSendConfEmail().
     */
    public function testSendConfEmail() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers User::deleteUser
     * @todo   Implement testDeleteUser().
     */
    public function testDeleteUser() {
        $userdata = array("fname" => "Robert", "lname" => "Lee", "email" => "test61@test.com",
            "password" => "password", "gender" => "M", "source" => "I");
        $this->object->createUser($userdata);
        $email = "test61@test.com";
        $id = (int) $this->object->searchUser($email);
        $sqlObj = new Database();
        $this->object->deleteUser($email);
        $query = "SELECT * FROM `user_credentials` WHERE `user_credentials`.`id`=$id";
        $this->assertEquals(0, $sqlObj->DoQuery($query));
        //$query = "SELECT * FROM `user_profile` WHERE `user_profile`.`uc_id` = $id";
        //$this->assertEquals( 0, $sqlObj->DoQuery($query));
        $query = "SELECT * FROM `db_tackster`.`track` WHERE `track`.`uc_id` = $id";
        $this->assertEquals(0, $sqlObj->DoQuery($query));
        //$query = "SELECT * FROM `db_tackster`.`bmk_activity` WHERE `bmk_activity`.`uc_id` = $id";
        //$this->assertEquals( 0, $sqlObj->DoQuery($query));
        $query = "SELECT * FROM `db_tackster`.`bmk_entry` WHERE `bmk_entry`.`uc_id` = $id";
        $this->assertEquals(0, $sqlObj->DoQuery($query));
        $query = "SELECT * FROM `db_tackster`.`bmk_activity` WHERE `bmk_activity`.`uc_id` = $id";
        $this->assertEquals(0, $sqlObj->DoQuery($query));
    }

    /**
     * @covers User::loadUser
     * @todo   Implement testLoadUser().
     */
    public function testLoadUser() {
        // Remove the following lines when you implement this test.
        $result = $this->object->loadUser('test@test.com');

        $this->assertEquals(
                'test@test.com', $result{'email'}
        );
    }

    /**
     * @covers User::logInUser
     * @todo   Implement testLogInUser().
     */
    public function testLogInUser() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers User::resetPassword
     * @todo   Implement testResetPassword().
     */
    public function testResetPassword() {
        /*  $sqlObj = new DataBase();

          $query = "select password from user_credentials where email = 'test@test.com'";
          $sqlObj->DoQuery($query);
          $result = $sqlObj->GetData();
          $result = $result[0];
          $this->object->resetPassword('test@test.com', 'anythingreallly');
          $sqlObj->DoQuery($query);
          $result2 = $sqlObj->GetData();
          $result2 = $result[0]; */
        $this->markTestIncomplete(
        //$result, $result2
        );
    }

}
